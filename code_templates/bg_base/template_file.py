class Background_template:
    """Template code generation for the Background class of autogenerated games.
    Each function in this template class generates a function for the generated
    class. These functions in this class can have arguments for customization
    of the Background's functionality."""

    def gen_init_func(self):
        self.init_func = f'import pygame\n'
        self.init_func += f'import json\n'
        self.init_func += f'import os\n'
        self.init_func += f'\n'
        self.init_func += f'class Background:\n'
        self.init_func += f'    def __init__(self, filename):\n'
        self.init_func += f'        self.x = 0\n'
        self.init_func += f'        self.repeat = 0\n'
        self.init_func += f'        self.min_repeat = -2\n'
        self.init_func += f'        self.max_repeat = 1\n'
        self.init_func += f'        self.reached_left_end = False\n'
        self.init_func += f'        self.reached_right_end = False\n'
        self.init_func += f'        self.n_imgs = 3 # The number of contiguous bacground images to hold in memory and display\n'
        self.init_func += f'\n'
        self.init_func += f'\n'
        self.init_func += f'        self.build_surf(filename)\n'
        self.init_func += f'\n'
        self.init_func += f'        with open(__file__.replace(os.path.basename(__file__), "")+"/img/bg.json") as f:\n'
        self.init_func += f'            self.info = json.load(f)\n'
        self.init_func += f'\n'
        self.init_func += '\n'

    def gen_build_surf_func(self):
        self.build_surf_func = f'    def build_surf(self, filename):\n'
        self.build_surf_func += f'        im_surf = pygame.image.load(filename).convert_alpha()\n'
        self.build_surf_func += f'        self.surf = pygame.Surface((3*im_surf.get_width(), im_surf.get_height()))\n'
        self.build_surf_func += f'\n'
        self.build_surf_func += f'        for i in range(self.n_imgs):\n'
        self.build_surf_func += f'            # TODO Generalize for the case where we have other background\n'
        self.build_surf_func += f'            # images and not the same repeated image.\n'
        self.build_surf_func += f'            self.surf.blit(im_surf, (self.x+i*im_surf.get_width(), 0))\n'
        self.build_surf_func += f'\n'
        self.build_surf_func += f"        self.im_dims = {'w':im_surf.get_width(), 'h':im_surf.get_height()}\n"
        self.build_surf_func += f'\n'
        self.build_surf_func += '\n'

    def gen_update_func(self):
        self.update_func = f'    def update(self, surf, delta):\n'
        self.update_func += f'        self.x += delta\n'
        self.update_func += f'\n'
        self.update_func += f'        if self.x > 0:\n'
        self.update_func += f'            if self.repeat > self.min_repeat:\n'
        self.update_func += f'                # TODO Generalize for the case where we have other background\n'
        self.update_func += f'                # images and not the same image repeating. I.e. just shifting\n'
        self.update_func += f'                # the background is acceptable here, but if we have other\n'
        self.update_func += f'                # images, we may need to actually load the next one.\n'
        self.update_func += f"                self.x -= self.im_dims['w']\n"
        self.update_func += f'                self.repeat -= 1\n'
        self.update_func += f'                print(f"repeat = {self.repeat}")\n'
        self.update_func += f'            else:\n'
        self.update_func += f'                self.reached_right_end = True\n'
        self.update_func += f"        if self.x < -1*self.im_dims['w']:\n"
        self.update_func += f'            if self.repeat < self.max_repeat:\n'
        self.update_func += f'                # TODO Generalize for the case where we have other background\n'
        self.update_func += f'                # images and not the same image repeating.\n'
        self.update_func += f"                self.x += self.im_dims['w']\n"
        self.update_func += f'                self.repeat += 1\n'
        self.update_func += f'                print(f"repeat = {self.repeat}")\n'
        self.update_func += f'            else:\n'
        self.update_func += f'                self.reached_left_end = True\n'
        self.update_func += f'\n'
        self.update_func += f'        #surf.blit(self.surf, (self.x, 0))\n'
        self.update_func += f'        #if self.x < 0:\n'
        self.update_func += f'        #    pass\n'
        self.update_func += f'\n'
        self.update_func += '\n'

    def write_class_to_file(self, filename="background.py"):
        self.gen_init_func()
        self.gen_build_surf_func()
        self.gen_update_func()

        with open(filename, "w") as g:
            g.write(self.init_func)
            g.write(self.build_surf_func)
            g.write(self.update_func)
